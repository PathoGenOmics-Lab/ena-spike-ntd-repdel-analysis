from pathlib import Path
import functools
import csv

configfile: "config/config.yaml"
include: "rules/common.smk"

OUTPUT = Path(config["OUTPUT"])
SAMPLE_PATHS = read_sample_paths(config["SEARCH_TABLE"])


rule all:
    input:
        OUTPUT/"ena/summarize_ena_search/summary.png",
        OUTPUT/"ena/summarize_ena_search_after_processing/summary.png",
        expand(OUTPUT/"preproc/multiqc/{study}", study=read_studies(config["SEARCH_TABLE"])),
        expand(
            OUTPUT/"repdel/filter_haplotype/{haplotype}.inclpct_{inclpct}.exclpct_{exclpct}.csv",
            haplotype=config["HAPLOTYPES"].keys(),
            inclpct=config["MIN_INCLUDE_FREQ"],
            exclpct=config["MAX_EXCLUDE_FREQ"]
        ),
        expand(OUTPUT/"repdel/report_region/{path}/sample.png", path=SAMPLE_PATHS),
        OUTPUT/"ena/crosslink_gisaid.csv",
        "batched.done"


rule batcher_merge:
    input:
        coverage = OUTPUT/"variants/coverage/{path}/sample.tsv",
        lineage  = OUTPUT/"pangolin/{path}/assignment.filtered.csv"
    output:
        temp(touch(OUTPUT/"batcher/{path}/done"))


rule batcher:
    input: expand(OUTPUT/"batcher/{path}/done", path=SAMPLE_PATHS)
    output: touch("batched.done")


include: "rules/fetch.smk"
include: "rules/ena.smk"
include: "rules/preproc.smk"
include: "rules/mapping.smk"
include: "rules/variants.smk"
include: "rules/pangolin.smk"

if not config.get("UNTIL_FILTER", False):
    include: "rules/repdel.smk"
