from pathlib import Path
import pandas as pd


def build_fastqc_targets(wildcards):
    df = pd.read_csv(checkpoints.search_ena.get(**wildcards).output.table, sep="\t")
    return [
        f"output/preproc/fastqc/{study}/{sample}/{platform}/{run}/{layout}_{strategy}" \
        for (platform, study, sample, run, layout, strategy), _ in df.groupby(
            ["instrument_platform", "study_accession", "sample_accession", "run_accession", "library_layout", "library_strategy"]
        )
    ]


def build_qc_targets(wildcards):
    df = pd.read_csv(checkpoints.search_ena.get(**wildcards).output.table, sep="\t")
    return [
        f"output/preproc/fastp/{study}/{sample}/{platform}/{run}/{layout}_{strategy}/report.html" \
        for (platform, study, sample, run, layout, strategy), _ in df.groupby(
            ["instrument_platform", "study_accession", "sample_accession", "run_accession", "library_layout", "library_strategy"]
        )
    ]


def build_sorted_bam_targets(wildcards):
    df = pd.read_csv(checkpoints.search_ena.get(**wildcards).output.table, sep="\t")
    return [
        f"output/mappings/sorted_bam/{study}/{sample}/{platform}/{run}/{layout}_{strategy}/sample.sorted.bam" \
        for (platform, study, sample, run, layout, strategy), _ in df.groupby(
            ["instrument_platform", "study_accession", "sample_accession", "run_accession", "library_layout", "library_strategy"]
        )
    ]


def build_multiqc_per_study_targets(wildcards):
    df = pd.read_csv(checkpoints.search_ena.get(**wildcards).output.table, sep="\t")
    return [
        f"output/preproc/multiqc/{study}" \
        for study, _ in df.groupby("study_accession")
    ]


rule all:
    input:
        "output/ena/search.tsv",
        "output/ena/report/search/summary.pdf",
        build_multiqc_per_study_targets,
        build_qc_targets,
        build_sorted_bam_targets


checkpoint search_ena:
    conda: "envs/pydata.yaml"
    params:
        start_date = "2021-11-01",  # outbreak.info approx BA.1 start date
        end_date = "2022-08-01",    # outbreak.info approx BA.1 end date
        limit = 0,                 # 0 means no record limit
        taxonomy = "2697049",       # SARS-CoV-2
        host_scientific_name = "Homo sapiens",
        chunksize = 1024
    output:
        table = "output/ena/search.tsv",
        query = "output/ena/search.json"
    script: "scripts/search_ena.py"


rule summarize_ena_search:
    conda: "envs/rdata.yaml"
    input:
        table = "output/ena/search.tsv"
    params:
        count_bins = 9,
        plot_width_in = 25
    output:
        plot_pdf = "output/ena/report/search/summary.pdf",
        plot_png = "output/ena/report/search/summary.png",
        country_timeline_table = "output/ena/report/search/summary_country_timeline.csv",
        tech_timeline_table = "output/ena/report/search/summary_tech_timeline.csv",
        seqres_timeline_table = "output/ena/report/search/summary_seqres_timeline.csv"
    script: "scripts/summarize_ena_search.R"


rule split_ena_search_results:
    group: "download"
    input:
        table = "output/ena/search.tsv"
    output:
        table = "output/ena/search/{study}/{sample}/{platform}/{run}/{layout}_{strategy}/runs.csv"
    run:
        import pandas as pd
        df = pd.read_csv(input.table, sep="\t")
        df[
            (df["instrument_platform"] == wildcards.platform) & \
            (df["run_accession"] == wildcards.run) & \
            (df["sample_accession"] == wildcards.sample) & \
            (df["study_accession"] == wildcards.study) & \
            (df["library_layout"] == wildcards.layout)
        ].to_csv(output.table)


rule download_ena:
    group: "download"
    conda: "envs/pydata.yaml"
    input:
        table = "output/ena/search/{study}/{sample}/{platform}/{run}/{layout}_{strategy}/runs.csv"
    params:
        sleep = 1
    output:
        folder = directory("output/ena/downloads/fastq/{study}/{sample}/{platform}/{run}/{layout}_{strategy}")
    script: "scripts/download_ena.py"


rule fastqc:
    group: "preproc"
    conda: "envs/qc.yaml"
    shadow: "minimal"
    input: "output/ena/downloads/fastq/{study}/{sample}/{platform}/{run}/{layout}_{strategy}"
    output: directory("output/preproc/fastqc/{study}/{sample}/{platform}/{run}/{layout}_{strategy}")
    shell: "mkdir out && fastqc --noextract -o out {input:q}/*.fastq.gz && mv out {output:q}"


rule multiqc:
    group: "preproc"
    conda: "envs/qc.yaml"
    shadow: "minimal"
    input:
        build_fastqc_targets
    output:
        directory("output/preproc/multiqc/{study}")
    shell: "mkdir out && multiqc --outdir out --dirs {input:q} && mv out {output:q}"


rule fastp_single:
    group: "preproc"
    conda: "envs/qc.yaml"
    input:
        folder = "output/ena/downloads/fastq/{study}/{sample}/{platform}/{run}/SINGLE_{strategy}"
    output:
        report = "output/preproc/fastp/{study}/{sample}/{platform}/{run}/SINGLE_{strategy}/report.html",
        json = "output/preproc/fastp/{study}/{sample}/{platform}/{run}/SINGLE_{strategy}/report.json",
        fastq = "output/preproc/fastq/{study}/{sample}/{platform}/{run}/SINGLE_{strategy}/sample.fastp.fastq.gz"
    shell: """fastqs=( {input.folder:q}/*.fastq.gz ) && fastp -i "${{fastqs[0]}}" -o {output.fastq:q} -h {output.report:q} -j {output.json:q}"""


rule fastp_paired:
    group: "preproc"
    conda: "envs/qc.yaml"
    input:
        folder = "output/ena/downloads/fastq/{study}/{sample}/{platform}/{run}/PAIRED_{strategy}"
    output:
        report = "output/preproc/fastp/{study}/{sample}/{platform}/{run}/PAIRED_{strategy}/report.html",
        json = "output/preproc/fastp/{study}/{sample}/{platform}/{run}/PAIRED_{strategy}/report.json",
        fastq_1 = "output/preproc/fastq/{study}/{sample}/{platform}/{run}/PAIRED_{strategy}/sample.fastp.fastq.R1.gz",
        fastq_2 = "output/preproc/fastq/{study}/{sample}/{platform}/{run}/PAIRED_{strategy}/sample.fastp.fastq.R2.gz"
    shell: """fastqs=( {input.folder:q}/*.fastq.gz ) && fastp -i "${{fastqs[0]}}" -I "${{fastqs[1]}}" -o {output.fastq_1:q} -O {output.fastq_2:q} -h {output.report:q} -j {output.json:q}"""


rule efetch_fasta_reference:
    params:
        accession = "NC_045512.2"
    output:
        fasta = "output/reference.fasta"
    shell: "curl -s -o {output.fasta:q} https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id={params.accession}&rettype=fasta"


rule map_single_nanopore:
    threads: 8
    group: "mapping"
    conda: "envs/reads.yaml"
    input:
        reference = "output/reference.fasta",
        fastq = "output/preproc/fastq/{study}/{sample}/OXFORD_NANOPORE/{run}/SINGLE_{strategy}/sample.fastp.fastq.gz"
    output:
        bam = "output/mappings/sorted_bam/{study}/{sample}/OXFORD_NANOPORE/{run}/SINGLE_{strategy}/sample.sorted.bam"
    shell: "minimap2 -t {threads} -ax map-ont {input.reference:q} {input.fastq:q} | samtools sort -o {output.bam:q}"


rule map_paired_illumina:
    threads: 8
    group: "mapping"
    conda: "envs/reads.yaml"
    input:
        reference = "output/reference.fasta",
        fastq_1 = "output/preproc/fastq/{study}/{sample}/ILLUMINA/{run}/PAIRED_{strategy}/sample.fastp.fastq.R1.gz",
        fastq_2 = "output/preproc/fastq/{study}/{sample}/ILLUMINA/{run}/PAIRED_{strategy}/sample.fastp.fastq.R2.gz"
    output:
        bam = "output/mappings/sorted_bam/{study}/{sample}/ILLUMINA/{run}/PAIRED_{strategy}/sample.sorted.bam"
    shell: "minimap2 -t {threads} -ax sr {input.reference:q} {input.fastq_1:q} {input.fastq_2:q} | samtools sort -o {output.bam:q}"


rule map_single_illumina:
    threads: 8
    group: "mapping"
    conda: "envs/reads.yaml"
    input:
        reference = "output/reference.fasta",
        fastq = "output/preproc/fastq/{study}/{sample}/ILLUMINA/{run}/SINGLE_{strategy}/sample.fastp.fastq.gz"
    output:
        bam = "output/mappings/sorted_bam/{study}/{sample}/ILLUMINA/{run}/SINGLE_{strategy}/sample.sorted.bam"
    shell: "minimap2 -t {threads} -ax sr {input.reference:q} {input.fastq:q} | samtools sort -o {output.bam:q}"


use rule map_single_illumina as map_single_ion_torrent with:
    threads: 8
    group: "mapping"
    conda: "envs/reads.yaml"
    input:
        reference = "output/reference.fasta",
        fastq = "output/preproc/fastq/{study}/{sample}/ION_TORRENT/{run}/SINGLE_{strategy}/fastq/sample.fastp.fastq.gz"
    output:
        bam = "output/mappings/sorted_bam/{study}/{sample}/ION_TORRENT/{run}/SINGLE_{strategy}/sorted_bam/sample.sorted.bam"

# TODO: PACBIO_SMRT
