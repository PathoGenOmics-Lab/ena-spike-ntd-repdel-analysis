from pathlib import Path
import functools
import csv


SEARCH_DF_COLS = (
    "study_accession", "sample_accession", "instrument_platform",
    "run_accession", "library_layout", "library_strategy"
)


def build_groups(wildcards, columns) -> list:
    with open(checkpoints.search_ena.get(**wildcards).output.table) as f:
        reader = csv.DictReader(f, delimiter="\t")
        groups = {
            tuple(row[col] for col in columns) \
            for row in reader
        }
    return sorted(groups)


@functools.cache
def build_targets(wildcards, template: str, columns=SEARCH_DF_COLS) -> list:
    return sorted(template.format(*groups) for groups in build_groups(wildcards, columns))


rule all:
    input:
        "output/ena/search.tsv",
        "output/ena/report/search/summary.pdf",
        lambda w: build_targets(w, "output/preproc/multiqc/{}", ("study_accession",)),
        lambda w: build_targets(w, "output/mappings/sorted_bam/{}/{}/{}/{}/{}_{}/sample.sorted.bam")


rule efetch_fasta_reference:
    params:
        accession = "NC_045512.2"
    output: "output/reference/sequence.fasta"
    resources:
        runtime = "10m"
    shell: 'curl -s -o {output:q} "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id={params.accession}&rettype=fasta"'


rule efetch_gff3_reference:
    params:
        accession = "NC_045512.2"
    output: "output/reference/features.gff3"
    resources:
        runtime = "10m"
    shell: 'curl -s -o {output:q} "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id={params.accession}&rettype=gff3"'


rule filter_gff3_reference:
    input: "output/reference/features.gff3"
    params:
        selection = {"type": ["gene"]}
    output: "output/reference/features.filtered.gff3"
    resources:
        runtime = "10m"
    run:
        import pandas as pd
        # see: https://gmod.org/wiki/GFF3
        COLUMNS = ("seqid", "source", "type", "start", "end", "score", "strand", "phase", "attributes", "tags")
        gff3 = pd.read_csv(input[0], sep="\t", header=COLUMNS, comment="#")
        for column, values in params.selection.items():
            gff3 = gff3[gff3[column].isin(values)]
        gff3.to_csv(output[0], sep="\t")


include: "rules/ena.smk"
include: "rules/preproc.smk"
include: "rules/mapping.smk"
